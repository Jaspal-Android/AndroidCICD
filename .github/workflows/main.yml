# .github/workflows/android-ci-cd.yml
name: Android CI/CD

# Trigger the workflow on push or pull request events to the main branch
on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

# Define environment variables
env:
  JAVA_VERSION: '17'  # Specify Java version
  ANDROID_SDK_TOOLS: '10406996'  # Latest Android SDK tools version as of 2025

jobs:
  build:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Step 3: Install Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: ${{ env.ANDROID_SDK_TOOLS }}

      # Step 4: Accept Android SDK licenses
      - name: Accept Android SDK licenses
        run: |
          yes | sdkmanager --licenses || true

      # Step 5: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      # Step 6: Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Run Gradle dependency sync
      - name: Gradle dependency sync
        run: ./gradlew dependencies   

      # Step 7: Run lint checks
      - name: Run Lint
        run: ./gradlew lintDebug

      # upload artifact for lint results
      - name: Upload Lint Results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: app/build/reports/lint-results.html

      # Step 8: Run unit tests
      - name: Start Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          script: ./gradlew connectedDebugAndroidTest

      # Upload Unit Test Report as artifact
      - name: Upload Unit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: app/build/reports/tests/testDebugUnitTest/

      # Step 10: Build Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      # Step 11: Upload Debug APK as artifact
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Step 12: Build Release APK (only on push to main)
      - name: Build Release APK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
      - name: List build outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Listing contents of app/build/outputs:"
          find app/build/outputs -type f || echo "No files found in app/build/outputs"
      - name: Upload Release APK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
          if-no-files-found: warn

